// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  categories     Category[]
  categoryOrder  CategoryOrder? @relation("UserCategoryOrder")
  createdAt      DateTime       @default(now())
  email          String         @unique
  emailVerified  DateTime?
  hashedPassword String?
  id             String         @id @default(cuid())
  socialId       String?
  image          String?
  lastname       String?
  name           String?
  sessions       Session[]
  updatedAt      DateTime?      @updatedAt
}

model Session {
  expires      DateTime
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @map("user_id")
}

model VerificationToken {
  expires    DateTime
  identifier String
  token      String   @unique

  @@unique([identifier, token])
}

model Category {
  boughtDate    DateTime?
  boughtPrice   Int?
  children      Category[] @relation("CategoryHierarchy")
  currency      String?
  description   String?
  favorite      Boolean?
  id            Int        @id @default(autoincrement())
  items         Item[]
  link          String?
  name          String
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId      Int?
  productNumber String?
  properties    Json?
  share         Boolean?
  status        String?
  unit          String?
  user          User?      @relation(fields: [userId], references: [id])
  userId        String?
  value         String?
}

model CategoryOrder {
  id         Int    @id @default(autoincrement())
  orderedIds Json
  user       User   @relation("UserCategoryOrder", fields: [userId], references: [id], onDelete: Cascade)
  userId     String @unique
}

model Item {
  category       Category @relation(fields: [categoryId], references: [id])
  categoryId     Int
  itemsSectionId Int?
  id             Int      @id @default(autoincrement())
  properties     Json
  status         String
  title          String
  type           String
  value          Float
}
